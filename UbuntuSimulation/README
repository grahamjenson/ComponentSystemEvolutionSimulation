WHAT DO WE MEASURE?
Two user objectives, Minimise change, and maximise up-to-dateness!

Question 1) Linear Variable sensitivity testing!
We alter the linear varaibles (update and install probabilities) and study the effect. 

1a) What are the effects of extreme users?
		Always install	|| Never Install
        	---------------	||---------------
Always Update		30	||    1
      	 			||
Never Update       	30	||    1    

As install varies because of what is selected to be installed, 30 users are selected to be tested

Total: 62 Users
	
1b) What effects does the update probability have on the system?
Once a month month = 12/365 = 0.05
Twice a month = 24/365 = 0.1
Once a week = 0.2
Twice a week = 0.4
daily = 1.0

10 times for each variable (except daily as that does not matter)
Total: 40 users

1c) What effects does the install probability have on the system?
Once a month month = 12/365 = 0.05
Twice a month = 24/365 = 0.1
Once a week = 0.2
Twice a week = 0.4
daily = 1.0

Do you have to install less after a time (are their common required packages?)

Total: 150 users

 
Question 2) Observations from the model!
Look at the observations made about the model and see if they can be simulated

2a) How complex is the problem?
Time to solve problems?

Total: 0 users

2b) Previous user requests may not be satisfied in evolved systems
Look at always install systems with no update, and count how many installations are not satisfied at the end?

Total: 0 users

2c) Take some always install from 1a), execute all installs in one action in the last time, 
to see if the system differs.

Total: 30 Users

Question 3) Simulated "real" users
Using update and install probabilities extracted from the submitted user logs,
we can bootstrap the simulation with these values to see how real users will behave?

Select 5 real users values randomly + 2 extreme users, create 30 users with each value (that is 5*30 users),
simulate and compare the results.

Total: 210 Users

Question 4) Altering the criteria order to see the effects.
A notable lacking in the criteria avilable is that of a progressive update, that is an update criteria that is used to maximise the uptodateness of the system.
For this we define a moderate and an extreme progressive update,
moderate update criteira = -removed,-uptodatedistance,-new
extreme update criteria = -uptodatedistance,-removed,-new

As you can see the extreme update criteira tries to maximise the uptodateness of the system without 

See how altering the system is better.

4a) What effect does a progressive update criteria have?
Once a month month = 12/365 = 0.05
Twice a month = 24/365 = 0.1
Once a week = 0.2
Twice a week = 0.4
daily = 1.0

simulate updating with progressive update criteria.

Hypothesis, more change closer to fuly updated.

Total: 50 users

5)Stable criteria
Introduce the stable component criteria.
Introduce metric Effective change (change components/change in uptodatedistance) of each evolution step

Hypothesis: the effective change is greater with stable component criteria, instead of uptodatedistance criteria.


5a) What is the stable versions best length of days for lowest effective change for both progressive and conservative users? 


Bootstrap 5 real usres probabilities, simulate with progressive and conservative criteria with uptodatedistance replaced with stable component criteria.
5*2 (10) * 30 = 300 Users

Measure the effective change metric made to the systems, compared to those from q4a and q13, to see if it has improved.
Measure the effect of other metrics like uptodate distance of solutions and so on.

Total: 300 users



